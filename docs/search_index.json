[
["intro.html", "Chapter 1 An intro to R and RStudio 1.1 Setting up an R environment on your computer 1.2 Learning the very basics of R 1.3 Problems", " Chapter 1 An intro to R and RStudio 1.1 Setting up an R environment on your computer 1.1.1 Installing R Learning basic R is an important part of this course, and the first order of business is to download and install an R distribution on your personal computer. We will be using RStudio as an IDE (integrated development environment). Like R itself, it is free and readily available for all major platforms. To download R to your computer, go to https://cloud.r-project.org and download the version of R for your operating system (Windows, Mac or Linux). If you are on a Mac, you want the “Latest release” which, at the time of writing, is 4.0.2. On Windows, follow the link “install R for the first time”. We are not going to do any cutting edge stuff in this class, so an older releases should be fine, too, if you happen to have it already installed on your system. Once you download the installation file (.pkg on a Mac or .exe on Windows), run it and follow instructions. Once it is successfully installed, don’t run the installed app. We will use RStudio for that. 1.1.2 Installing RStudio To install RStudio, go to https://rstudio.com/products/rstudio/download/ to get RStudio. There are several versions to choose from - the one your are looking for is “RStudio desktop - Free”. 1.1.3 Installing basic packages Finally, we need to install several R packages we will be using (mostly implicitly) during the class. First, run the following command in your console install.packages( &quot;tidyverse&quot;, &quot;tinytex&quot;) This should take about a minute. The next part is a bit longer, and can take up to 15 minutes. You only have to do it once, though: tinytex::install_tinytex() 1.2 Learning the very basics of R Once R and RStudio are on your computer, it is time to get acquainted with the basics of R. This class is not about the finer points of R itself, and I will try to make your R experience as smooth as possible. After all, R is a tool that will help us explore and understand stochastic processes. Having said (written) that, it is important to realize that R is a powerful programming language specifically created for statistical and probabilistic applications. Some knowledge of R is a valuable skill to have in today’s job market, and you should take this opportunity to learn it. The best way, of course, is by using it, but before you start, you need to know the very basics. Don’t worry, R is very user friendly and easy to get started in. In addition, it has been around for a long time (its predecessor S appeared in 1976) and is extremely well documented (just google introduction to R or something like that). I like all books written by R guru Hadley Wickham. In particular, R for Data Science features a nice and elementary introduction to R (albeit from the point of view of a data scientist). If you want to learn more, check the webpage of the bookdown package. It is a tool for writing books which easily integrates R computation, and its webpage features a list of books on R and other topics (including many of Wickham’s books) - they are all free. Btw, this very set of lecture notes was written in Rmarkdown using the bookdown package! 1.3 Problems Here are several simple problems. Their goal is to give you an idea of exactly how much R is required to get started in this course. Virtually any “introduction to R” should contain enough information to get you through all of these. Problem 1.1 Compute the following (your answer should be a decimal number): \\(1/238746238746\\) \\(2^{45}\\) \\(3^{28}\\) \\(\\sqrt{15}\\) \\(\\cos(\\pi/8)\\) \\(e^2\\) \\(\\log(2)\\) (the base is \\(e\\)) \\(\\log_{10}(2)\\) (the base is \\(10\\)) \\(\\sqrt[3]{ \\frac{1342.16-2.18}{(3 \\pi +4.12)^2}}\\) Note: some of the answers will look like this 3.14e+13. If you do not know what that means, google E notation. Problem 1.2 1. Define two variables \\(a\\) and \\(b\\) with values \\(3\\) and \\(4\\) and “put” their product into a variable called \\(c\\). Output the value of \\(c\\). Define two vectors \\(x\\) and \\(y\\) of length \\(3\\), such that the components of \\(x\\) are \\(1,2,3\\) and the components of \\(y\\) are \\(8,9,0\\). Ouput their (componentwise) sum. Define a \\(2\\times 2\\) matrix \\(A=\\begin{pmatrix} 1 &amp; 2 \\\\ -1 &amp; 3 \\end{pmatrix}\\). Use the command matrix and make sure to understand how it works; you can access its documentation directly from \\(R\\) by writing ?matrix. Make sure you understand what the parameters ncol, nrow and byrow do. Compute the matrix square \\(A^2\\) (Careful! A*A will output a \\(2\\times 2\\) matrix, but it will not be \\(A^2\\) - it will be the matrix whose entries are the squares of the entries of \\(A\\). You need to use different notation.) Problem 1.3 Write a function that takes an argument \\(x\\) and returns \\(5\\) if \\(x\\geq 5\\) and \\(x\\) itself otherwise. Write a function that returns TRUE (a boolean value) if its argument is between \\(2\\) and \\(3\\) and FALSE otherwise. Problem 1.4 Construct a vector \\(x\\) which contains all numbers from \\(1\\) to \\(100\\). Construct a vector \\(y\\) which contains squares of all numbers between \\(20\\) and \\(30\\). Construct a vector \\(z\\) the same size as \\(y\\) with boolean entries (i.e., TRUE or FALSE) that indicates whether the entry at the same position in \\(y\\) is above \\(600\\) or not. (This is much easier to do than it sounds.) "]
]
