[
["intro.html", "Chapter 1 An intro to R and RStudio 1.1 Setting up an R environment on your computer 1.2 Learning the basics of R 1.3 Problems", " Chapter 1 An intro to R and RStudio 1.1 Setting up an R environment on your computer 1.1.1 Installing R Learning basic R is an important part of this course, and the first order of business is to download and install an R distribution on your personal computer. We will be using RStudio as an IDE (integrated development environment). Like R itself, it is free and readily available for all major platforms. To download R to your computer, go to https://cloud.r-project.org and download the version of R for your operating system (Windows, Mac or Linux). If you are on a Mac, you want the “Latest release” which, at the time of writing, is 4.0.2. On Windows, follow the link “install R for the first time”. We are not going to do any cutting edge stuff in this class, so an older release should be fine, too, if you happen to have it already installed on your system. Once you download the installation file (.pkg on a Mac or .exe on Windows), run it and follow instructions. Once it is successfully installed, don’t run the installed app. We will use RStudio for that. 1.1.2 Installing RStudio To install RStudio, go to https://rstudio.com/products/rstudio/download/ to get RStudio. There are several versions to choose from - the one your are looking for is “RStudio desktop - Free”. After you download and install it, you are ready to run it. When it opens, you will see something like this The part on the left is called the console and that is one of the places where you enter commands. Before you do, it is important to adjust a few settings. Open the options window by pressing Cmd+, (on a Mac) or navigate to Tools-&gt;Global Options (on Windows or Linux). In there, uncheck “Restore .RData into workspace on startup” and set “Save workspace to .RData on exit” to “Never”, as shown below: This way, R will not pollute your environment with values you defined two weeks ago and completely forgot about. These settings are really an atavism and serve no purpose (for users like us) other than to introduce hard-to-track bugs. There are many other settings you can play with in RStudio, but the two I mentioned above are the only ones that I really recommend setting as soon as you install it. 1.1.3 Installing basic packages Finally, we need to install several R packages we will be using (mostly implicitly) during the class. First, run the following command in your console install.packages( &quot;tidyverse&quot;) This will install a number of useful packages and should only take about a minute or two. The next part is a bit longer, and can take up to 15 minutes if you have a slow computer/internet connection. You only have to do it once, though. Skip this step if you have LaTeX already installed on your system1. Start with install.packages(&quot;tinytex&quot;) followed by tinytex::install_tinytex() Note that the if you go to the top right corner of each of the code blocks (gray boxes) containing instructions above, an icon will appear. If you click on it, it will copy the content of the box into you clipboard, and you can simply paste it into RStudio. You can do that with any code block in these notes. 1.2 Learning the basics of R Once R and RStudio are on your computer, it is time to get acquainted with the basics of R. This class is not about the finer points of R itself, and I will try to make your R experience as smooth as possible. After all, R is a tool that will help us explore and understand stochastic processes. Having said that, it is important to realize that R is a powerful programming language specifically created for statistical and probabilistic applications. Some knowledge of R is a valuable skill to have in today’s job market, and you should take this opportunity to learn it. The best way, of course, is by using it, but before you start, you need to know the very basics. Don’t worry, R is very user friendly and easy to get started in. In addition, it has been around for a long time (its predecessor S appeared in 1976) and is extremely well documented - google introduction to R or a similar phrase, and you will get lots of useful hits. My plan is to give you a bare minimum in the next few paragraphs, and then to explain additional R concepts as we need them. This way, you will not be overwhelmed right from the start, and you will get a bit of a mathematical context as you learn more. Conversely, learning R commands will help with the math, too. 1.2.1 Asking for help The most important thing about learning R (and many other things, for that matter) is knowing whom (and how) to ask for help. Luckily, R is a well established language, and you can get a lot of information by simply googling your problem. For example, if you google logarithm in R the top hit (at the time of writing) gives a nice overview and some examples. Another way to get information about a command or a concept in R is to use the command help. For example, if you input help(\"log\") or ?log in your console, the right hand of your screen will display information on the function log and some of its cousins. Almost every help entry has examples at the bottom, and that is where I always go first. 1.2.2 Vectors Objects we will be manipulating in this class are almost exclusively vectors and matrices. The simplest vectors are those that have a single component, in other words, numbers. In R, you can assign a number to a variable using two different notations. Both a &lt;- 1 and a = 1 will assign the value \\(1\\) to the variable a. If you want to create a longer vector, you can use the concatenation operator c as follows: x = c(1, 2, 3, 4) Once you evaluate the above in your console, the value of x is stored and you can access it by using the command print print(x) ## [1] 1 2 3 4 or simply evaluating x itself: x ## [1] 1 2 3 4 Unlike all code blocks above them, the last two contain both input and output. It is standard not to mark the output by any symbol (like the usual &gt;), and to mark the output by ## which otherwise marks comments. This way, you can copy any code block from these notes and paste it into the console (or your script) without having to modify it in any way. Try it! We built the vector x above by concatenating four numbers (vectors of length 1). You can concatenate vectors of different sizes, too: a = c(1, 2, 3) b = c(4, 5, 6) (x = c(a, b, 7)) ## [1] 1 2 3 4 5 6 7 You may be wondering why I put x = c(a,b,7) in parentheses. Without them, x would still become (1,2,3,4,5,6,7), but its value would not be printed out. A statement in parentheses is not only evaluated, but its result is also printed out. This way, (x=2+3) is equivalent to x=2+3 followed by x or print(x). Vectors can contain things other than numbers. Strings, for example: (x = c(&quot;Picard&quot;, &quot;Data&quot;, &quot;Geordi&quot;)) ## [1] &quot;Picard&quot; &quot;Data&quot; &quot;Geordi&quot; If you need a vector consisting of consecutive numbers, use the colon : notation: 1:10 ## [1] 1 2 3 4 5 6 7 8 9 10 For sequences of equally spaced numbers, use the command seq (check its help for details) seq(from = 5, to = 20, by = 3) ## [1] 5 8 11 14 17 20 An important feature or R is that many of its functions are vectorized. That means that if you give it vectors as arguments, the returned value will be a vector of results of that operation performed element by element. For example x = c(10, 20, 30) y = c(2, 4, 5) x + y ## [1] 12 24 35 x * y ## [1] 20 80 150 x^2 ## [1] 100 400 900 cos(x) ## [1] -0.8390715 0.4080821 0.1542514 The vectors do not need to be of the same size. R uses the recycling rule - it recycles the values of the shorter one, starting from the beginning, until its size matches the longer one: x = c(10, 20, 30, 40, 50, 60) y = c(1, 3) x + y ## [1] 11 23 31 43 51 63 The case where the shorter vector is of length 1 is particularly useful: x = c(10, 20, 30, 40) x + 1 ## [1] 11 21 31 41 x * (-2) ## [1] -20 -40 -60 -80 Extracting parts of the vector is accomplished by using the indexing operator []. Here are some examples (what do negative numbers do?) x = c(10, 20, 30, 40, 50) x[1] ## [1] 10 x[c(1, 2)] ## [1] 10 20 x[-c(1, 2)] ## [1] 30 40 50 x[-c(3, 4)] ## [1] 10 20 50 x[1:4] ## [1] 10 20 30 40 x[c(1, 1, 2, 2, 5, 4)] ## [1] 10 10 20 20 50 40 People familiar with Python should be aware of the following two differences: 1. indexing starts at 1 and not 0, and 2. negative indexing removes components; it does not start counting from the end! It is important to note that the thing you put inside [] needs to be a vector itself. The above examples all dealt with numerical indices, but you can use Boolean indices, too. A variable is said to be Boolean or logical if it can takes only one of the two values TRUE or FALSE. A vector whose components are all Boolean, are called, of course, Boolean vectors. You can think of Boolean slicing as the operation where you go through your original vector, and choose which components you want to keep (TRUE) and which you want the throw away (FALSE). For example x = c(10, 20, 30, 40, 50) y = c(TRUE, FALSE, FALSE, TRUE, TRUE) x[y] ## [1] 10 40 50 This is especially useful when used together with the comparison operators. The expressions like x&lt;y or x==y are operators in R, just like x+y or x/y. The difference is that &lt; and == return Boolean values. For example 1 == 2 ## [1] FALSE 3 &gt; 4 ## [1] FALSE 3 &gt;= 2 ## [1] TRUE These operators are vectorized, so you can do things like this x = c(1, 2, 3, 4, 5) y = c(1, 3, 3, 2, 5) x == y ## [1] TRUE FALSE TRUE FALSE TRUE or, using recycling, x = c(1, 2, 3, 4, 5) x &gt; 3 ## [1] FALSE FALSE FALSE TRUE TRUE Let’s combine that with indexing. Suppose that we want to keep only the values greater than 4 in the vector x. The vector y=x&gt;4 is going to be of the same length as x and contain Boolean values. When we slice x using it, only the values of x on positions where x&gt;4 will survive, and these are exactly the values we needed: x = c(3, 2, 5, 3, 1, 5, 6, 4) y = x &gt; 4 x[y] ## [1] 5 5 6 or, simply, x[x &gt; 4] ## [1] 5 5 6 Indexing can be used to set the values of a vector just as easily x = c(10, 20, 30, 40, 50) x[2:4] = c(0, 1, 2) x ## [1] 10 0 1 2 50 Recycling rules apply in the same way as above x = c(10, 20, 30, 40, 50) x[c(1, 2, 5)] = 7 x ## [1] 7 7 30 40 7 1.2.3 Matrices A matrix in R can be created using the command matrix. The unusual part is that the input is a vector and R populates the components of the matrix by filling it in column by column or row by row. As always, an example will make this clear x = c(1, 2, 3, 4, 5, 6) (A = matrix(x, nrow = 2, ncol = 3, byrow = TRUE)) ## [,1] [,2] [,3] ## [1,] 1 2 3 ## [2,] 4 5 6 The first argument of the function matrix is the vector which contains all the values. If you want a matrix with m rows and n columns, this vector should be of size \\(m n\\). The arguments ncol and nrow are self-explanatory, and byrow is a Boolean argument which signals whether to fill by columns or by rows. Here is what happens when we set byrow = FALSE x = c(1, 2, 3, 4, 5, 6) (A = matrix(x, nrow = 2, ncol = 3, byrow = FALSE)) ## [,1] [,2] [,3] ## [1,] 1 3 5 ## [2,] 2 4 6 Accessing components of a matrix is as intuitive as it gets (A = matrix(c(1, -1, 7, 2), nrow = 2, ncol = 2)) ## [,1] [,2] ## [1,] 1 7 ## [2,] -1 2 A[1, 2] ## [1] 7 Note that I did not use the argument byrow at all. In such cases, R always uses the default value (documented in the function’s help). For matrix the default value of byrow is FALSE', i.e., it fills the matrix column by column. This is not what we usually want because we tend to think of matrices as composed of rows. Moral: do not forgetbyrow = TRUE` if that is what you, indeed, want. Usual matrix operations can be performed in R in the obvious way (A = matrix(c(1, -1, 7, 2), nrow = 2, ncol = 2)) ## [,1] [,2] ## [1,] 1 7 ## [2,] -1 2 (B = matrix(c(2, 2, -3, -4), nrow = 2, ncol = 2)) ## [,1] [,2] ## [1,] 2 -3 ## [2,] 2 -4 A + B ## [,1] [,2] ## [1,] 3 4 ## [2,] 1 -2 You should be careful with matrix multiplication. The naive operator * yields a matrix, but probably not the one you want (what does * do?) (A = matrix(c(1, 2, 0, 1), nrow = 2, ncol = 2)) ## [,1] [,2] ## [1,] 1 0 ## [2,] 2 1 (B = matrix(c(3, 5, 1, 0), nrow = 2, ncol = 2)) ## [,1] [,2] ## [1,] 3 1 ## [2,] 5 0 A * B ## [,1] [,2] ## [1,] 3 0 ## [2,] 10 0 If you want the matrix product, you have to use %*% A %*% B ## [,1] [,2] ## [1,] 3 1 ## [2,] 11 2 1.2.4 Functions The following syntax is used to define functions in R: my_function = function(x, y, z) { return(x + y + z) } The function my_function returns the sum of its arguments. Having defined it, as above, we can use it like this my_function(1, 3, 9) ## [1] 13 Neither the output nor the arguments of a function in R are restricted to numbers. Our next example function, named winners takes two vectors as arguments and returns a new vector whose components are those components of the first input vector (x) that are larger than the corresponding components of the second input vector (y) winners = function(x, y) { z = x &gt; y return(x[z]) } winners(c(1, 4, 5, 6, 2), c(2, 3, 3, 9, 2)) ## [1] 4 5 Note how we used several things we learned above in this function. First, we defined the Boolean vector which indicates where x is larger than y. Then, we used Boolean indexing to return only certain components of x. 1.3 Problems Here are several simple problems. Their goal is to give you an idea of exactly how much R is required to get started in this course. Virtually any “introduction to R” should contain enough information to get you through all of these. Problem 1.1 Compute the following (your answer should be a decimal number): \\(1/238746238746\\) \\(2^{45}\\) \\(3^{28}\\) \\(\\sqrt{15}\\) \\(\\cos(\\pi/8)\\) \\(e^2\\) \\(\\log(2)\\) (the base is \\(e\\)) \\(\\log_{10}(2)\\) (the base is \\(10\\)) \\(\\sqrt[3]{ \\frac{1342.16-2.18}{(3 \\pi +4.12)^2}}\\) Note: some of the answers will look like this 3.14e+13. If you do not know what that means, google E notation. Problem 1.2 1. Define two variables \\(a\\) and \\(b\\) with values \\(3\\) and \\(4\\) and “put” their product into a variable called \\(c\\). Output the value of \\(c\\). Define two vectors \\(x\\) and \\(y\\) of length \\(3\\), such that the components of \\(x\\) are \\(1,2,3\\) and the components of \\(y\\) are \\(8,9,0\\). Ouput their (componentwise) sum. Define a \\(2\\times 2\\) matrix \\(A=\\begin{pmatrix} 1 &amp; 2 \\\\ -1 &amp; 3 \\end{pmatrix}\\). Use the command matrix and make sure to understand how it works; you can access its documentation directly from \\(R\\) by writing ?matrix. Make sure you understand what the parameters ncol, nrow and byrow do. Compute the matrix square \\(A^2\\) (Careful! A*A will output a \\(2\\times 2\\) matrix, but it will not be \\(A^2\\) - it will be the matrix whose entries are the squares of the entries of \\(A\\). You need to use different notation.) Problem 1.3 Write a function that takes an argument \\(x\\) and returns \\(5\\) if \\(x\\geq 5\\) and \\(x\\) itself otherwise. Write a function that returns TRUE (a boolean value) if its argument is between \\(2\\) and \\(3\\) and FALSE otherwise. Problem 1.4 Construct a vector \\(x\\) which contains all numbers from \\(1\\) to \\(100\\). Construct a vector \\(y\\) which contains squares of all numbers between \\(20\\) and \\(30\\). Construct a vector \\(z\\) the same size as \\(y\\) with boolean entries (i.e., TRUE or FALSE) that indicates whether the entry at the same position in \\(y\\) is above \\(600\\) or not. (This is much easier to do than it sounds.) it may interfere with your existing installation↩︎ "]
]
